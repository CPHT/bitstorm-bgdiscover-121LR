dim result_discover
dim i
dim c
dim k
dim t(30)
dim mac_addr(6)     # Bluetooth MAC address container
dim device_name(17)
dim led_result, led_port, led_data
dim isConnected

event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw )
	# configure P1.3 as output
    call hardware_io_port_config_direction(1, $08)
    call hardware_io_port_write(1, $08, $08)
	isConnected = 0

	
    # get Bluetooth MAC address of this device (NOTE: this is little-endian!)
    call system_address_get()(mac_addr(0:6))
	
    device_name(0:1) = $42  # 'B'
    device_name(1:1) = $69  # 'i'
    device_name(2:1) = $74  # 't'
    device_name(3:1) = $53  # 'S'
    device_name(4:1) = $74  # 't'
    device_name(5:1) = $6f  # 'o'
    device_name(6:1) = $72  # 'r'
    device_name(7:1) = $6d  # 'm'
    device_name(8:1) = $20 # ' '
    device_name(9:1) = (mac_addr(2:1)/$10) + 48 + ((mac_addr(2:1)/$10)/10*7) # MAC byte 4 10's digit
    device_name(10:1) = (mac_addr(2:1)&$f)  + 48 + ((mac_addr(2:1)&$f )/10*7) # MAC byte 4 1's digit
    device_name(11:1) = $3a # ':'
    device_name(12:1) = (mac_addr(1:1)/$10) + 48 + ((mac_addr(1:1)/$10)/10*7) # MAC byte 5 10's digit
    device_name(13:1) = (mac_addr(1:1)&$f)  + 48 + ((mac_addr(1:1)&$f )/10*7) # MAC byte 5 1's digit
    device_name(14:1) = $3a # ':'
    device_name(15:1) = (mac_addr(0:1)/$10) + 48 + ((mac_addr(0:1)/$10)/10*7) # MAC byte 6 10's digit
    device_name(16:1) = (mac_addr(0:1)&$f)  + 48 + ((mac_addr(0:1)&$f )/10*7) # MAC byte 6 1's digit
    
    # write custom device name to local GATT attribute
    call attributes_write(c_device_name, 0, 17, device_name(0:17))		
	
	#set to advertising mode
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	
	#set bondable mode
	call sm_set_bondable_mode(1)
	
	#enable RX watermark on UART1 (no TX watermark)
    call system_endpoint_set_watermarks(system_endpoint_uart1, 1, 0)
	
	#start discovery mode - scan_interval: 75ms, scan_window: 50ms, passive
	call gap_set_scan_parameters($4B, $32, 0)
	call gap_discover(gap_discover_generic)(result_discover)
	
	#start led/adc timer, handle 0, repeating
	call hardware_set_soft_timer(5000,0,0)
end

event gap_scan_response(rssi, packet_type, sender, address_type, bond, data_len, data_data)
	if (data_len < 10) then
		return
	end if
		
	if (data_data(8:1) = $01 && data_data(9:1) = $14) then
	
		## Start char
		t(0:1) = "*"
		
		## MAC
		t(1:1) = (sender(5:1)/$10) + 48 + ((sender(5:1)/$10)/10*7)
		t(2:1) = (sender(5:1)&$f) + 48 + ((sender(5:1)&$f )/10*7)
		t(3:1) = (sender(4:1)/$10) + 48 + ((sender(4:1)/$10)/10*7)
		t(4:1) = (sender(4:1)&$f) + 48 + ((sender(4:1)&$f )/10*7)
		t(5:1) = (sender(3:1)/$10) + 48 + ((sender(3:1)/$10)/10*7)
		t(6:1) = (sender(3:1)&$f) + 48 + ((sender(3:1)&$f )/10*7)
		t(7:1) = (sender(2:1)/$10) + 48 + ((sender(2:1)/$10)/10*7)
		t(8:1) = (sender(2:1)&$f) + 48 + ((sender(2:1)&$f )/10*7)
		t(9:1) = (sender(1:1)/$10) + 48 + ((sender(1:1)/$10)/10*7)
		t(10:1) = (sender(1:1)&$f) + 48 + ((sender(1:1)&$f )/10*7)
		t(11:1) = (sender(0:1)/$10)+ 48 + ((sender(0:1)/$10)/10*7)
		t(12:1) = (sender(0:1)&$f) + 48 + ((sender(0:1)&$f )/10*7)

		t(13:1) = " "
		
		## RSSI
		t(14:1) = (rssi/$10) + 48 + ((rssi/$10)/10*7)	
		t(15:1) = (rssi&$f) + 48 + ((rssi&$f )/10*7)

		t(16:1) = " "

		## Temp
		t(17:1) = (data_data(10:1)/$10) + 48 + ((data_data(10:1)/$10)/10*7)	
		t(18:1) = (data_data(10:1)&$f) + 48 + ((data_data(10:1)&$f )/10*7)
		t(19:1) = (data_data(11:1)/$10) + 48 + ((data_data(11:1)/$10)/10*7)	
		t(20:1) = (data_data(11:1)&$f) + 48 + ((data_data(11:1)&$f )/10*7)
		
		t(21:1) = " "

		## Batt
		t(22:1) = (data_data(12:1)/$10) + 48 + ((data_data(12:1)/$10)/10*7)	
		t(23:1) = (data_data(12:1)&$f) + 48 + ((data_data(12:1)&$f )/10*7)
		t(24:1) = (data_data(13:1)/$10) + 48 + ((data_data(13:1)/$10)/10*7)	
		t(25:1) = (data_data(13:1)&$f) + 48 + ((data_data(13:1)&$f )/10*7)
		
		t(26:1) = " "

		## Checksum 
		## Requires script_timeout value of 10000 in config.xml
		k = 0
		c = 0
		while k <= 26
			c = c ^ t(k:1)
			k = k + 1
		end while
		t(27:1) = (c/$10) + 48 + ((c/$10)/10*7)	
		t(28:1) = (c&$f) + 48 + ((c&$f )/10*7)
		
		## EOL
		t(29:1) = "\n"

		call system_endpoint_tx(5, 30, t(0:30))
	end if
end

procedure toggle_led()
   call hardware_io_port_read(1, $08)(led_result, led_port, led_data)

   if led_data & $08 then
      call hardware_io_port_write(1, $08, $00)
   else
      call hardware_io_port_write(1, $08, $08)
   end if
end


event hardware_soft_timer(handle)
	if handle = 0 then
		if isConnected = 1 then
			call toggle_led()
		end if
	end if
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	isConnected = 1
end

event connection_disconnected(handle,result_discon)
	isConnected = 0
    call hardware_io_port_write(1, $08, $08)

	#connection disconnected, continue advertising
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	call gap_discover(gap_discover_generic)(result_discover)
end




